import unittest
import numpy as np
import xarray as xr
from pycomlink.processing.pytorch_utils import run_inference


class TestTorchCnnInference(unittest.TestCase):
    def test_cnn_artificial_data(self):
        # Create a sample normalised cml total loss dataarray
        tl_norm = np.array([1, -1.3, 0, -1.3, -0.3, -1, -0.3, 0, 0, 0, 0, 0, -0.3, 0, 0, -1, 0, -1, -0.3, -0.3, 
            -0.3, -0.3, 0, -0.3, 0, 0, 0, 0, 0, -0.3, 0, 0, 1, -0.3, 0, -0.3, 0.7, -0.3, 0.7, 0, 0.7, 0, 0, 1, 
            1, 0, -0.3, 0.7, -0.3, 0, -0.3, -0.3, -0.3, 0, -0.3, -0.3, -0.3, 0, -0.3, 0, -0.3, -0.3, 0, 0.7, 
            -0.3, -0.3, -0.3, -0.3, 0, 0.7, 0, 0, -0.3, 0, -0.3, 1, 0.7, 0, 1, 0, 0, 0, 0.7, 0, 0.7, 0, 0.7, 0, 
            1, 1, 0, 0.7, -0.3, 1, -0.3, 1, -0.3, 1.7, -1, -0.3, -1.3, 0, -0.3, -0.3, 0, -0.3, -0.3, 1, 0, 0.7, 
            0, 1, -0.3, 0, -0.3, -0.3, 0, 1, 0.7, 1, 0.7, 1, 0, 0, -0.3, 1, -0.3, 0.7, 0, 1, 0.7, 0.7, 0, -0.3, 
            -0.3, -0.3, 0, 1, -0.3, 1, -0.3, 1.7, -0.3, 0.7, -0.3, 2, 0, 0.7, -0.3, 2, -1, 0.7, -1, 1, -1.3, 
            0.7, 0, 1, -0.3, 1, -1, -0.3, 0, 1, 0, 0.7, 0, 1, -0.3, 1, -0.3, 1, -1, 1, 0, 1, -1, 1, -0.3, 1, 
            -0.3, 0, -0.3, 0, 0, 0, -0.3, 0, -1.3, -0.3, 0, 0, -0.3, 0, -1, -1, -1, 0, 0, 0.7, -0.3, -0.3, -1.3, 
            0, -1.3, 0, -1, 0, -1.3, -1, -0.3, 1, 0.7, 0.7, -0.3, -0.3, 0, 0, 0, -0.3, 0, 0, -1.3, -1, -1, -1, 
            -0.3, 1, 0, 1, -0.3, -0.3, -0.3, 1, -0.3, 0, 0, 0, 0, 0, 0, -0.3, -1.3, -1.3, 0, -0.3, 0, 0, 0.7, 
            0.7, -0.3, 1, 0.7, 0.7, 0, -0.3, -0.3, -0.3, -0.3, 0, 0.7, 1, 1, -0.3, 1, 1, -0.3, 0, 0.7, -0.3, 
            -0.3, 1, 0, 0.7, 0, -0.3, -0.3, 1, -0.3, 1, -0.3, 0, -0.3, -0.3, -0.3, 0, -0.3, 0, -0.3, 0, 0, 0.7, 
            -1, 0, -0.3, 0.7, 0, 0.7, -0.3, 1, 0, 0.7, 0, 1, 0.7, 0.7, 0, 0.7, -0.3, 1, -0.3, 0.7, 0, 1, -0.3, 1, 
            -0.3, -0.3, -0.3, 0, 0.7, 1, -0.3, -0.3, 0, -0.3, 0, 0, 0, 0, 1, 0, 0.7, -1, 0, 0, 1, -0.3, 0.7, 
            -0.3, 0.7, -0.3, 1, -0.3, -0.3, -0.3, 0.7, 0, 0, -0.3, 0.7, 1, -0.3, 0, 0, 1, -1, -1, -0.3, 0.7, 
            -0.3, 0, -0.3, -1, -0.3, 0, -1, -1, 0, 0, 0, 0, -0.3, 0, -0.3, 0, 0, 0, -1, -1.3, -0.3, 0.7, 0.7, 0, 
            -0.3, -0.3, 0, -0.3, 0, 0.7, 1, 1, 0, 0, 0.7, 0, 0, 1, 1, 2, 0.7, 1, 0, -1.3, 0, -0.3, 0, 0, 0, -0.3, 
            0, 0, 1, 1, 0, -0.3, 1, -0.3, -0.3, -1, 1, 0.7, 0, -1, 0.7, 0, 0, 0, 0.7, 0, 0.7, -0.3, 0.7, 0, 0, 
            -0.3, 0, 0, -0.3, 1, -0.3, 0, 0, 0, -0.3, -0.3, 0, 0.7, 0, 0.7, 0.7, 0, -0.3, 0.7, 1, 1, 1, 1, -0.3, 
            1, 0, 1, -0.3, 0, -0.3, 1, -0.3, 0, 0, 1, 0, -0.3, -0.3, 0, 0, 0, 0, 0, 0, 0, 0, -0.3, -0.3, 0, 0, 1, 
            0, 1, 0, 1, -0.3, 0.7, 0, 1, 0, 1, -0.3, -0.3, -0.3, 1, 0, 0.7, -0.3, 1, -0.3, 1, 0, 1, -0.3, 0.7, 
            -0.3, 0, 0, 1, 1, 0.7, 0, 0, 0.7, 1.
        ], dtype=float).reshape(260, 2, 1)
        
        norm_tl_sample = xr.DataArray(
            tl_norm,
            dims=['time', 'channel_id', 'cml_id'],
            coords={
                'time': np.datetime64('today', 's') + np.arange(len(tl_norm)) * np.timedelta64(1, 'm'),
                'channel_id': ['channel_1','channel_2'],
                'cml_id': ['0']
            },
            name='tl'
        )

        # Load model for inference and run the wet_dry classification 
        model_URL = "https://github.com/jpolz/cml_wd_pytorch/raw/be2b15fa987838ea1f709dd0180917eebf66271a/data/dummy_model/best_model_jit.pt"
        result = run_inference.cnn_wd(model_path_or_url=model_URL,data=norm_tl_sample)

        result_array = result.predictions[150:230].values.reshape(-1)

        # Expected results array
        correct_res = np.array([
            0.1060552, 0.10901334, 0.11198409, 0.11430503, 0.11642854,
            0.11070773, 0.0709348, 0.08168192, 0.07762136, 0.07497578,
            0.09008731, 0.08683751, 0.09288582, 0.11699703, 0.12047599,
            0.08457239, 0.14885044, 0.17061606, 0.14322673, 0.17445827,
            0.29616216, 0.36455899, 0.27753198, 0.25834382, 0.21049702,
            0.18544669, 0.19627486, 0.16474159, 0.15695924, 0.20894076,
            0.20373435, 0.1826781, 0.20272318, 0.16553825, 0.1432516,
            0.15305994, 0.1283716, 0.13474469, 0.1838505, 0.18677777,
            0.19159602, 0.22055379, 0.20054385, 0.18619108, 0.17177975,
            0.14642175, 0.14142966, 0.18958452, 0.24683958, 0.30903107,
            0.31317768, 0.27310082, 0.24279061, 0.23262662, 0.23071449,
            0.21459946, 0.22334261, 0.242954, 0.23045039, 0.2510072,
            0.23915583, 0.21963204, 0.21551426, 0.23211803, 0.22815455,
            0.23927423, 0.27232593, 0.28779328, 0.3088811, 0.29467314,
            0.28127208, 0.25586587, 0.27831465, 0.25910002, 0.20236845,
            0.23284966, 0.22505884, 0.21777135, 0.2251005, 0.18549199
        ])

        # Compare model results with saved expected results
        np.testing.assert_array_almost_equal(
            result_array, correct_res, decimal=5
        )


if __name__ == "__main__":
    unittest.main()


